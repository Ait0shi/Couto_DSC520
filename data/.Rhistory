# Date: 2023-06-15
## Create a numeric vector with the values of 3, 2, 1 using the `c()` function
## Assign the value to a variable named `num_vector`
## Print the vector
num_vector <- c(3,2,1)
num_vector
## Create a character vector with the values of "three", "two", "one" "using the `c()` function
## Assign the value to a variable named `char_vector`
## Print the vector
char_vector <- c("three","two","one")
char_vector
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[2]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <-week1_sleep[1:5]
## Add the total hours slept in week one using the `sum` function
## Assign the value to variable `total_sleep_week1`
total_sleep_week1 <- sum(week1_sleep[1:7])
## Create a vector called `week2_sleep` representing how many hours slept each night of the week
## Use the values 7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9
week2_sleep <- c(7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9)
## Add the total hours slept in week two using the sum function
## Assign the value to variable `total_sleep_week2`
total_sleep_week2 <- sum(week2_sleep[1:7])
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
total_sleep_week1 < total_sleep_week2
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <-c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
names(week2_sleep) <- days
## Display the amount of sleep on Tuesday of week 1 by selecting the variable name
week1_sleep[3]
## Create vector called weekdays from the days vector
weekdays <- days[2:6]
weekdays
## Create vector called weekends containing Sunday and Saturday
weekends <-c("Saturday","Sunday")
weekends
## Calculate the mean about sleep on weekdays for each week
## Assign the values to weekdays1_mean and weekdays2_mean
weekdays1_mean <- mean(week1_sleep[weekdays])
weekdays2_mean <- mean(week2_sleep[weekdays])
## Using the weekdays1_mean and weekdays2_mean variables,
## see if weekdays1_mean is greater than weekdays2_mean using the `>` operator
weekdays1_mean > weekdays2_mean
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
week1_sleep > 8
## Create a matrix from the following three vectors
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3,87.9)
students_combined <-rbind(student01,student02,student03)
grades <- matrix(students_combined,byrow = FALSE,nrow = 2)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2,94.1)
grades <-rbind(students_combined,student04)
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <-cbind(students_combined,assignment04)
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(grades)<- students
students_combined <-rbind(student01,student02,student03)
grades <- matrix(students_combined,byrow = FALSE,nrow = 2)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2,94.1)
grades <-rbind(students_combined,student04)
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <-cbind(students_combined,assignment04)
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades,assignment04)
## Create a matrix from the following three vectors
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3,87.9)
students_combined <-rbind(student01,student02,student03)
grades <- matrix(students_combined,byrow = FALSE,nrow = 2)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2,94.1)
grades <-rbind(students_combined,student04)
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades,assignment04)
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(grades)<- students
colnames(grades)<- assignments
grades
## Total points for each assignment using `colSums()`
colSums(grades)
colSums(assignments)
## Total points for each student using `rowSums()`
rowsum(grades)
## Total points for each student using `rowSums()`
rowsums(grades)
## Total points for each student using `rowSums()`
rowSums(grades)
## Matrix with 10% and add it to grades
## Matrix with 10% and add it to grades
weighted_grades <- grades * 0.1 + grades
weighted
weighted_grades
## Create a factor of book genres using the genres_vector
## Assign the factor vector to factor_genre_vector
genres_vector <- c("Fantasy", "Sci-Fi", "Sci-Fi", "Mystery", "Sci-Fi", "Fantasy")
factor_genre_vector <-factor(genres_vector)
## Use the `summary()` function to print a summary of `factor_genre_vector`
summary(factor_genre_vector)
factor_genre_vector
ns using the recommendations_vector
## Create ordered factor of book recommendations using the recommendations_vector
## `no` is the lowest and `yes` is the highest
recommendations_vector <- c("neutral", "no", "no", "neutral", "yes")
factor_recommendations_vector <- factor(
recommendations_vector,
ordered = TRUE,
levels = c("no", "neutral", "yes"))
factor_recommendations_vector <- factor(
recommendations_vector,
ordered = TRUE,
levels = c("no", "neutral", "yes"))
# Assignment: ASSIGNMENT 1
# Name: Couto, Maria
# Date: 2023-06-15
## Create a numeric vector with the values of 3, 2, 1 using the `c()` function
## Assign the value to a variable named `num_vector`
## Print the vector
num_vector <- c(3,2,1)
num_vector
## Create a character vector with the values of "three", "two", "one" "using the `c()` function
## Assign the value to a variable named `char_vector`
## Print the vector
char_vector <- c("three","two","one")
char_vector
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[2]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <-week1_sleep[1:5]
## Add the total hours slept in week one using the `sum` function
## Assign the value to variable `total_sleep_week1`
total_sleep_week1 <- sum(week1_sleep[1:7])
## Create a vector called `week2_sleep` representing how many hours slept each night of the week
## Use the values 7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9
week2_sleep <- c(7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9)
## Add the total hours slept in week two using the sum function
## Assign the value to variable `total_sleep_week2`
total_sleep_week2 <- sum(week2_sleep[1:7])
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
total_sleep_week1 < total_sleep_week2
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <-c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
names(week2_sleep) <- days
## Display the amount of sleep on Tuesday of week 1 by selecting the variable name
week1_sleep[3]
## Create vector called weekdays from the days vector
weekdays <- days[2:6]
weekdays
## Create vector called weekends containing Sunday and Saturday
weekends <-c("Saturday","Sunday")
weekends
## Calculate the mean about sleep on weekdays for each week
## Assign the values to weekdays1_mean and weekdays2_mean
weekdays1_mean <- mean(week1_sleep[weekdays])
weekdays2_mean <- mean(week2_sleep[weekdays])
## Using the weekdays1_mean and weekdays2_mean variables,
## see if weekdays1_mean is greater than weekdays2_mean using the `>` operator
weekdays1_mean > weekdays2_mean
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
week1_sleep > 8
## Create a matrix from the following three vectors
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3,87.9)
students_combined <-rbind(student01,student02,student03)
grades <- matrix(students_combined,byrow = FALSE,nrow = 2)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2,94.1)
grades <-rbind(students_combined,student04)
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades,assignment04)
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(grades)<- students
colnames(grades)<- assignments
grades
## Total points for each assignment using `colSums()`
colSums(grades)
## Total points for each student using `rowSums()`
rowSums(grades)
## Matrix with 10% and add it to grades
weighted_grades <- grades * 0.1 + grades
weighted_grades
## Create a factor of book genres using the genres_vector
## Assign the factor vector to factor_genre_vector
genres_vector <- c("Fantasy", "Sci-Fi", "Sci-Fi", "Mystery", "Sci-Fi", "Fantasy")
factor_genre_vector <- factor(genres_vector)
factor_genre_vector
## Use the `summary()` function to print a summary of `factor_genre_vector`
summary(factor_genre_vector)
## Create ordered factor of book recommendations using the recommendations_vector
## `no` is the lowest and `yes` is the highest
recommendations_vector <- c("neutral", "no", "no", "neutral", "yes")
factor_recommendations_vector <- factor(
recommendations_vector,
ordered = TRUE,
levels = c("no", "neutral", "yes"))
## Use the `summary()` function to print a summary of `factor_recommendations_vector`
summary(factor_recommendations_vector)
## Using the built-in `mtcars` dataset, view the first few rows using the `head()` function
head(mtcars)
## Using the built-in mtcars dataset, view the last few rows using the `tail()` function
tail(mtcars)
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
## Sorting the characters_df by age using the order function and assign the result to the sorted_characters_df
sorted_characters_df <- characters_df[order(age),]
## Use `head()` to output the first few rows of `sorted_characters_df`
head(sorted_characters_df)
## Select all of the ring bearers from the dataframe and assign it to ringbearers_df
ringbearers_df <- characters_df[characters_df$ring_bearer == TRUE,]
## Use `head()` to output the first few rows of `ringbearers_df`
head(ringbearers_df)
knitr::stitch (couto_week2_assignment01.r)
knitr::stitch (Couto_Week2_Assignment01.R)
\ait0s\OneDrive\Documents\GitHub\Couto_DSC520\
knitr::stitch (Couto_Week2_Assignment01.R)
knitr::stitch (Couto_Week2_Assignment01.R)
tinytex::install_tinytex()
knitr::stitch(Couto_Week2_Assignment01.R)
head(ringbearers_df)
# Assignment: ASSIGNMENT 1
# Name: Couto, Maria
# Date: 2023-06-15
## Create a numeric vector with the values of 3, 2, 1 using the `c()` function
## Assign the value to a variable named `num_vector`
## Print the vector
num_vector <- c(3,2,1)
num_vector
## Create a character vector with the values of "three", "two", "one" "using the `c()` function
## Assign the value to a variable named `char_vector`
## Print the vector
char_vector <- c("three","two","one")
char_vector
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[2]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <-week1_sleep[1:5]
## Add the total hours slept in week one using the `sum` function
## Assign the value to variable `total_sleep_week1`
total_sleep_week1 <- sum(week1_sleep[1:7])
## Create a vector called `week2_sleep` representing how many hours slept each night of the week
## Use the values 7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9
week2_sleep <- c(7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9)
## Add the total hours slept in week two using the sum function
## Assign the value to variable `total_sleep_week2`
total_sleep_week2 <- sum(week2_sleep[1:7])
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
total_sleep_week1 < total_sleep_week2
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <-c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
names(week2_sleep) <- days
## Display the amount of sleep on Tuesday of week 1 by selecting the variable name
week1_sleep[3]
## Create vector called weekdays from the days vector
weekdays <- days[2:6]
weekdays
## Create vector called weekends containing Sunday and Saturday
weekends <-c("Saturday","Sunday")
weekends
## Calculate the mean about sleep on weekdays for each week
## Assign the values to weekdays1_mean and weekdays2_mean
weekdays1_mean <- mean(week1_sleep[weekdays])
weekdays2_mean <- mean(week2_sleep[weekdays])
## Using the weekdays1_mean and weekdays2_mean variables,
## see if weekdays1_mean is greater than weekdays2_mean using the `>` operator
weekdays1_mean > weekdays2_mean
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
week1_sleep > 8
## Create a matrix from the following three vectors
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3,87.9)
students_combined <-rbind(student01,student02,student03)
grades <- matrix(students_combined,byrow = FALSE,nrow = 2)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2,94.1)
grades <-rbind(students_combined,student04)
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades,assignment04)
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(grades)<- students
colnames(grades)<- assignments
grades
## Total points for each assignment using `colSums()`
colSums(grades)
## Total points for each student using `rowSums()`
rowSums(grades)
## Matrix with 10% and add it to grades
weighted_grades <- grades * 0.1 + grades
weighted_grades
## Create a factor of book genres using the genres_vector
## Assign the factor vector to factor_genre_vector
genres_vector <- c("Fantasy", "Sci-Fi", "Sci-Fi", "Mystery", "Sci-Fi", "Fantasy")
factor_genre_vector <- factor(genres_vector)
factor_genre_vector
## Use the `summary()` function to print a summary of `factor_genre_vector`
summary(factor_genre_vector)
## Create ordered factor of book recommendations using the recommendations_vector
## `no` is the lowest and `yes` is the highest
recommendations_vector <- c("neutral", "no", "no", "neutral", "yes")
factor_recommendations_vector <- factor(
recommendations_vector,
ordered = TRUE,
levels = c("no", "neutral", "yes"))
## Use the `summary()` function to print a summary of `factor_recommendations_vector`
summary(factor_recommendations_vector)
## Using the built-in `mtcars` dataset, view the first few rows using the `head()` function
head(mtcars)
## Using the built-in mtcars dataset, view the last few rows using the `tail()` function
tail(mtcars)
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
## Sorting the characters_df by age using the order function and assign the result to the sorted_characters_df
sorted_characters_df <- characters_df[order(age),]
## Use `head()` to output the first few rows of `sorted_characters_df`
head(sorted_characters_df)
## Select all of the ring bearers from the dataframe and assign it to ringbearers_df
ringbearers_df <- characters_df[characters_df$ring_bearer == TRUE,]
## Use `head()` to output the first few rows of `ringbearers_df`
head(ringbearers_df)
knitr::stitch(Couto_Week2_Assignment01.R)
citation(package = "knitr")
knitr::stitch('Couto_Week2_Assignment01.R')
knitr:: stitch('C:\Users\ait0s\OneDrive\Documents\DSC520-Statistics-Denton\Couto_Week2_Assignment01.R')
knitr:: stitch("C:\Users\ait0s\OneDrive\Documents\DSC520-Statistics-Denton\Couto_Week2_Assignment01.R")
Couto_Week2_Assignment01.R
knitr:: stitch('Couto_Week2_Assignment01.R')
knitr:: stitch('Couto_Week2_Assignment01.r')
knitr:: stitch('Couto_Week2_Assignment01.R')
## Create a database connection to `data/tidynomicon/example.db` using the dbConnect() function
## The first argument is the database driver which in this case is `RSQLite::SQLite()`
## The second argument is the path to the database file
## Assign the connection to `db` variable
db <- dbConnect(RSQLite::SQLite,"C:/Users/ait0s/OneDrive/Documents/Github/dsc520/data/tidynomicon/example.db")
library(RSQLite)
## Load the `DBI` library
install.packages("RSQLite")
library(DBI)
db <- DBI::dbConnect(RSQLite::SQLite(), dbname = "C:/Users/ait0s/OneDrive/Documents/Github/dsc520/data/tidynomicon/example.db")
person_df <- dbGetQuery(db, "SELECT * FROM PERSON")
head(person_df)
table_names <- dbListTables(db)
table_names
tables <- lapply(table_names,dbReadTable, conn = db)
tables
dbDisconnect(db)
library(jsonlite)
toJSON(scores_df)
scores_df
## Display summary statistics using the `summary()` function
## Display summary statistics using the `summary()` function
## Read the file `data/scores.csv` to `scores_df`
## Display summary statistics using the `summary()` function
scores_df <- read.csv(file = "C:/Users/ait0s/OneDrive/Documents/Github/dsc520/data/scores.csv", stringsAsFactors = TRUE)
summary(scores_df)
toJson(scores_df)
toJSON(scores_df)
JSON
scores_df
toJSON(scores_df,pretty = TRUE)
knitr:: stitch('assignment_02_CoutoMaria.R')
library(jsonlite)
scores_df
knitr:: stitch('assignment_02_CoutoMaria.R')
install.packages("RSQLite")
knitr:: stitch('assignment_02_CoutoMaria.R')
install.packages("RSQLite")
## List the contents of the working directory with the `dir()` function
dir("C:/Users/ait0s/OneDrive")
knitr:: stitch('assignment_02_CoutoMaria.R')
install.packages("RSQLite")
install.packages("RSQLite")
library(tidyverse)
housing_map1 <- map_chr(wk_5_housingdf,class)
library(dplyr)
wk_5_housingdf <- wk_5_housingdf %>% rename_at(1,~'sale_date')
#load housing data
setwd("C:/Users/ait0s/OneDrive/Documents/GitHub/dsc520/data")
library("readxl")
wk_5_housingdf <-read_excel("week-7-housing.xlsx")
wk_5_housingdf
library(dplyr)
wk_5_housingdf <- wk_5_housingdf %>% rename_at(1,~'sale_date')
wk_5_housingdf <- wk_5_housingdf %>% rename_at(2,~'sale_price')
wk_5_housingdf
library(tidyverse)
housing_map1 <- map_chr(wk_5_housingdf,class)
library(dplyr)
wk_5_housingdf <- wk_5_housingdf %>% rename_at(1,~'sale_date')
wk_5_housingdf <- wk_5_housingdf %>% rename_at(2,~'sale_price')
wk_5_housingdf
library(tidyverse)
housing_map1 <- map_chr(wk_5_housingdf,class)
housing_map1
# Using either the same dataset(s) you used in the previous weeks’
# exercise or a brand-new dataset of your choosing,
# perform the following transformations:
#load housing data
setwd("C:/Users/ait0s/OneDrive/Documents/GitHub/dsc520/data")
library("readxl")
wk_5_housingdf <-read_excel("week-7-housing.xlsx")
wk_5_housingdf
# Using the dplyr package, use the 6 different operations
# to analyze/transform the data -
library(dplyr)
wk_5_housingdf <- wk_5_housingdf %>% rename_at(1,~'sale_date')
wk_5_housingdf <- wk_5_housingdf %>% rename_at(2,~'sale_price')
wk_5_housingdf
# GroupBy
housing_group <-  wk_5_housingdf %>% group_by(year_built) %>%
count(year_built)
housing_group
# Summarise Cases
housing_summary <- wk_5_housingdf %>% group_by(bedrooms) %>%
summarise(total_amt = median(sale_price))
housing_summary
housing_summary2 <- summarise(wk_5_housingdf,
avg_size = mean(sq_ft_lot),
sd4price = sd(sale_price),
cheapest = min(sale_price),
priciest = max (sale_price))
housing_summary2
# Mutate
housing_mutate <- mutate(wk_5_housingdf,
price_per_sq_ft = sale_price/sq_ft_lot,
std_dv_price = sale_price -
mean(sale_price)/sd(sale_price))
# select
housing_mutate %>% select(sale_price,sq_ft_lot,price_per_sq_ft,std_dv_price)
# Filter
housing_filter <- filter(wk_5_housingdf,bedrooms > 5)
housing_filter %>% select(sale_date,sale_price,bedrooms)
# Arrange
housing_arrange <- arrange(wk_5_housingdf,desc(sale_date),desc(year_built))
housing_arrange %>% select(sale_date,year_built,sale_price)
housing_arrange_by_group <- arrange(group_by(wk_5_housingdf,year_built),
desc(sale_price),.by_group = T)
housing_arrange_by_group %>% select(year_built,sale_price)
# Using the purrr package – perform 2 functions on your dataset.
# You could use zip_n, keep, discard, compact, etc.
library(tidyverse)
housing_map1 <- map_chr(wk_5_housingdf,class)
rlang::last_trace()
map_chr(wk_5_housingdf,class)
map(wk_5_housingdf,class)
housing_map <- map(wk_5_housingdf,class)
housing_map
